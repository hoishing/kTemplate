{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kTemplate","text":"<p>a minimalist python html template</p> <ul> <li>docs</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p><code>pip install kTemplate</code></p>"},{"location":"#examples","title":"Examples","text":"<pre><code>from kTemplate import (\n  div, img, # common html elements\n  element   # for creating custom element\n)\n\n# create common html element\n# `class` represents by `cls` due to python keyword\nhtml_str = div(img(src='url'), cls='bar')\n# &lt;div class=\"bar\"&gt;&lt;img src=\"url\"/&gt;&lt;/div&gt;\n\n# create custom element\nmy_element = element(tag=\"MyElement\", content=\"foo\" props=\"bar\")\n# &lt;MyElement props=\"ar\"&gt;foo&lt;/MyElement&gt;\n</code></pre> <p>see also: how to create templates and components</p>"},{"location":"#motivation","title":"Motivation","text":"<p>When creating simple website, instead of seperating python and template files like this:</p> <pre><code>&lt;ul id=\"navigation\"&gt;\n  {% for item in navigation %}\n  &lt;li&gt;&lt;a href=\"{{ item.href }}\"&gt;{{ item.caption }}&lt;/a&gt;&lt;/li&gt;\n  {% endfor %}\n&lt;/ul&gt;\n</code></pre> <p>I prefer a pure python approach like this:</p> <pre><code>ul(\n  id = \"navigation\",\n  content = [\n    li(\n      a(item.caption, href=item.href)\n    )\n    for item in navigation\n  ]\n)\n</code></pre> <p>It provides full intellisense, type checking, and all language supports from the text editor. I feel a better DX with this approach.</p>"},{"location":"#need-help","title":"Need Help?","text":"<p>Open a github issue or ping me on Twitter </p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022 Kelvin Ng</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/","title":"References","text":""},{"location":"reference/#kTemplate.main","title":"<code>kTemplate.main</code>","text":""},{"location":"reference/#kTemplate.main.attr2str","title":"<code>attr2str(key: str, attrs: dict) -&gt; str</code>","text":"<p>create attribute string of specific key in an html element</p> <p>Examples:</p> <pre><code>Here shows the attribute string output from diff types of attribute dict value\n\n- str -&gt; str\n&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": \"y\"})\n' x=\"y\"'\n\n- empty str -&gt; empty str\n&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": \"\"})\n' x=\"\"'\n\n- non str truthy -&gt; key itself\n&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": True})\n' x'\n&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": 1})\n' x'\n\n- non str falsy -&gt; omit\n&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": False})\n''\n&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": None})\n''\n&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": 0})\n''\n\n- convert attr underscore to hyphen\n&gt;&gt;&gt; attr2str(key=\"data_y\", attrs={\"data_y\": \"y\"})\n' data-y=\"y\"'\n\n- convert attr name cls to class\n&gt;&gt;&gt; attr2str(key=\"cls\", attrs={\"cls\": \"y\"})\n' class=\"y\"'\n</code></pre> Note <p>to work around python naming restriction, the key <code>cls</code> will conver to <code>class</code>, and underscore <code>_</code> will convert to hyphen <code>-</code></p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>attribute key name</p> required <code>attrs</code> <code>dict</code> <p>attribute key-value pairs of an element</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>attribute portion of an element</p> Source code in <code>kTemplate/main.py</code> <pre><code>def attr2str(key: str, attrs: dict) -&gt; str:\n    \"\"\"\n    create attribute string of specific key in an html element\n\n    Examples:\n\n        Here shows the attribute string output from diff types of attribute dict value\n\n        - str -&gt; str\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": \"y\"})\n        ' x=\"y\"'\n\n        - empty str -&gt; empty str\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": \"\"})\n        ' x=\"\"'\n\n        - non str truthy -&gt; key itself\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": True})\n        ' x'\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": 1})\n        ' x'\n\n        - non str falsy -&gt; omit\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": False})\n        ''\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": None})\n        ''\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": 0})\n        ''\n\n        - convert attr underscore to hyphen\n        &gt;&gt;&gt; attr2str(key=\"data_y\", attrs={\"data_y\": \"y\"})\n        ' data-y=\"y\"'\n\n        - convert attr name cls to class\n        &gt;&gt;&gt; attr2str(key=\"cls\", attrs={\"cls\": \"y\"})\n        ' class=\"y\"'\n\n    Note:\n        to work around python naming restriction,\n        the key `cls` will conver to `class`,\n        and underscore `_` will convert to hyphen `-`\n\n    Args:\n        key (str): attribute key name\n        attrs (dict): attribute key-value pairs of an element\n\n    Returns:\n        str: attribute portion of an element\n    \"\"\"\n    attr = \"class\" if key == \"cls\" else key.replace(\"_\", \"-\")\n    val = attrs[key]\n\n    if isinstance(val, str):\n        return f' {attr}=\"{val}\"'\n\n    return f\" {attr}\" if val else \"\"\n</code></pre>"},{"location":"reference/#kTemplate.main.create_elements","title":"<code>create_elements(tags: str) -&gt; list[Callable[..., str]]</code>","text":"<p>create tagged element functions</p> Notes <p>This is a higher order function that returns a list of functions</p> <p>Examples:</p> <pre><code>- single element\n&gt;&gt;&gt; funcs = create_elements(\"div\")\n&gt;&gt;&gt; [f() for f in funcs]\n['&lt;div /&gt;']\n\n- multiple elements\n&gt;&gt;&gt; funcs = create_elements(\"a, br\")\n&gt;&gt;&gt; [f() for f in funcs]\n['&lt;a /&gt;', '&lt;br /&gt;']\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>tags</code> <code>str</code> <p>names of functions to be created, comma separated eg. \"a, br, div, span\"</p> required <p>Returns:</p> Type Description <code>list[Callable[..., str]]</code> <p>list[TaggedElement]: list of tagged element functions eg. [a br div span]</p> Source code in <code>kTemplate/main.py</code> <pre><code>def create_elements(tags: str) -&gt; list[Callable[..., str]]:\n    \"\"\"create tagged element functions\n\n    Notes:\n        This is a higher order function that returns a list of functions\n\n    Examples:\n\n        - single element\n        &gt;&gt;&gt; funcs = create_elements(\"div\")\n        &gt;&gt;&gt; [f() for f in funcs]\n        ['&lt;div /&gt;']\n\n        - multiple elements\n        &gt;&gt;&gt; funcs = create_elements(\"a, br\")\n        &gt;&gt;&gt; [f() for f in funcs]\n        ['&lt;a /&gt;', '&lt;br /&gt;']\n\n    Args:\n        tags (str): names of functions to be created, comma separated\n            eg. \"a, br, div, span\"\n\n    Returns:\n        list[TaggedElement]: list of tagged element functions\n            eg. [a br div span]\n    \"\"\"\n    op = []\n    for tag in tags.split(\",\"):\n        func = partial(element, tag.strip())\n        func.__doc__ = f\"\"\"`{tag}` element function\n\nArgs:\n    content (str | list[str], optional): Defaults to None.\n        text or list of other elements, `None` returns element w/o closing tag\n    args (list[str], optional): names of value-less attributes\n        - eg. `defer`, `selected`\n        - it is also useful for UnoCSS attributify mode\n    kwagrs (dict): key-value pairs of html attributes\n        - if val is str, assign `key=\"val\"`\n        - if key is non-string truthy, assign value-less attribute, eg.\n            - selected=True -&gt; selected\n            - defer=1 -&gt; defer\n        - if key is non-str falsy, the key is omitted\n            - eg. &lt;option selected=\nReturns:\n    str: `{tag}` element string with attributes\n\"\"\"\n        op.append(func)\n\n    return op\n</code></pre>"},{"location":"reference/#kTemplate.main.element","title":"<code>element(tag: str, content: str | list[str] = None, *args, **kwargs) -&gt; str</code>","text":"<p>return html element with specific tag and attributes</p> <p>Examples:</p> <pre><code>- void element, content=None (default)\n&gt;&gt;&gt; element(tag=\"br\")\n'&lt;br /&gt;'\n\n- void element w/ attr\n&gt;&gt;&gt; element(tag=\"img\", src=\"http://img.url\")\n'&lt;img src=\"http://img.url\" /&gt;'\n\n- empty string content -&gt; element with end tag but no content\n&gt;&gt;&gt; element(tag=\"script\", content=\"\", src=\"url\")\n'&lt;script src=\"url\"&gt;&lt;/script&gt;'\n\n- non-string truthy attrubite -&gt; return attribute key itself\n&gt;&gt;&gt; element(tag=\"option\", content=\"a\", selected=True)\n'&lt;option selected&gt;a&lt;/option&gt;'\n\n- non-string falsy attrubite -&gt; attribute omitted\n&gt;&gt;&gt; element(tag=\"option\", content=\"a\", selected=False)\n'&lt;option&gt;a&lt;/option&gt;'\n\n- var positional args -&gt; return attribute key itself\n&gt;&gt;&gt; element('option', 'foo', 'selected', value='foo')\n'&lt;option value=\"foo\" selected&gt;foo&lt;/option&gt;'\n\n- var positional args, useful in UnoCSS attributify mode\n&gt;&gt;&gt; element('div', None, 'm-2', 'rounded', 'text-teal-400')\n'&lt;div m-2 rounded text-teal-400 /&gt;'\n\n- var positional args + keyword args\n&gt;&gt;&gt; element('a', 'foo', 'm-2', 'rounded', 'text-teal-400', href='bar')\n'&lt;a href=\"bar\" m-2 rounded text-teal-400&gt;foo&lt;/a&gt;'\n\n- element tree\n&gt;&gt;&gt; element(tag=\"div\", content=element(\"div\", \"x\"))\n'&lt;div&gt;&lt;div&gt;x&lt;/div&gt;&lt;/div&gt;'\n\n- mix text w/ element\n&gt;&gt;&gt; element(tag=\"div\", content=f'x{element(\"i\", \"y\")}')\n'&lt;div&gt;x&lt;i&gt;y&lt;/i&gt;&lt;/div&gt;'\n\n- content w/ list of elements -&gt; elements in list are siblings\n&gt;&gt;&gt; element(\n...     tag=\"div\",\n...     content=[element(\"br\"), element(\"a\", content=\"a link\", href=\"url\")]\n... )\n'&lt;div&gt;&lt;br /&gt;&lt;a href=\"url\"&gt;a link&lt;/a&gt;&lt;/div&gt;'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>element tag name</p> required <code>content</code> <code>str | list[str]</code> <p>Defaults to None. text or list of other elements, <code>None</code> returns element w/o closing tag</p> <code>None</code> <code>args</code> <code>list[str]</code> <p>names of value-less attributes - eg. <code>defer</code>, <code>selected</code> - it is also useful for UnoCSS attributify mode</p> <code>()</code> <code>kwagrs</code> <code>dict</code> <p>key-value pairs of html attributes - if val is str, assign <code>key=\"val\"</code> - if key is non-string truthy, assign value-less attribute, eg.     - selected=True -&gt; selected     - defer=1 -&gt; defer - if key is non-str falsy, the key is omitted     - eg. &lt;option selected=</p> required <p>Returns:     str: html element with specific tag and attributes</p> Source code in <code>kTemplate/main.py</code> <pre><code>def element(tag: str, content: str | list[str] = None, *args, **kwargs) -&gt; str:\n    \"\"\"return html element with specific tag and attributes\n\n    Examples:\n\n        - void element, content=None (default)\n        &gt;&gt;&gt; element(tag=\"br\")\n        '&lt;br /&gt;'\n\n        - void element w/ attr\n        &gt;&gt;&gt; element(tag=\"img\", src=\"http://img.url\")\n        '&lt;img src=\"http://img.url\" /&gt;'\n\n        - empty string content -&gt; element with end tag but no content\n        &gt;&gt;&gt; element(tag=\"script\", content=\"\", src=\"url\")\n        '&lt;script src=\"url\"&gt;&lt;/script&gt;'\n\n        - non-string truthy attrubite -&gt; return attribute key itself\n        &gt;&gt;&gt; element(tag=\"option\", content=\"a\", selected=True)\n        '&lt;option selected&gt;a&lt;/option&gt;'\n\n        - non-string falsy attrubite -&gt; attribute omitted\n        &gt;&gt;&gt; element(tag=\"option\", content=\"a\", selected=False)\n        '&lt;option&gt;a&lt;/option&gt;'\n\n        - var positional args -&gt; return attribute key itself\n        &gt;&gt;&gt; element('option', 'foo', 'selected', value='foo')\n        '&lt;option value=\"foo\" selected&gt;foo&lt;/option&gt;'\n\n        - var positional args, useful in UnoCSS attributify mode\n        &gt;&gt;&gt; element('div', None, 'm-2', 'rounded', 'text-teal-400')\n        '&lt;div m-2 rounded text-teal-400 /&gt;'\n\n        - var positional args + keyword args\n        &gt;&gt;&gt; element('a', 'foo', 'm-2', 'rounded', 'text-teal-400', href='bar')\n        '&lt;a href=\"bar\" m-2 rounded text-teal-400&gt;foo&lt;/a&gt;'\n\n        - element tree\n        &gt;&gt;&gt; element(tag=\"div\", content=element(\"div\", \"x\"))\n        '&lt;div&gt;&lt;div&gt;x&lt;/div&gt;&lt;/div&gt;'\n\n        - mix text w/ element\n        &gt;&gt;&gt; element(tag=\"div\", content=f'x{element(\"i\", \"y\")}')\n        '&lt;div&gt;x&lt;i&gt;y&lt;/i&gt;&lt;/div&gt;'\n\n        - content w/ list of elements -&gt; elements in list are siblings\n        &gt;&gt;&gt; element(\n        ...     tag=\"div\",\n        ...     content=[element(\"br\"), element(\"a\", content=\"a link\", href=\"url\")]\n        ... )\n        '&lt;div&gt;&lt;br /&gt;&lt;a href=\"url\"&gt;a link&lt;/a&gt;&lt;/div&gt;'\n\n    Args:\n        tag (str): element tag name\n        content (str | list[str], optional): Defaults to None.\n            text or list of other elements, `None` returns element w/o closing tag\n        args (list[str], optional): names of value-less attributes\n            - eg. `defer`, `selected`\n            - it is also useful for UnoCSS attributify mode\n        kwagrs (dict): key-value pairs of html attributes\n            - if val is str, assign `key=\"val\"`\n            - if key is non-string truthy, assign value-less attribute, eg.\n                - selected=True -&gt; selected\n                - defer=1 -&gt; defer\n            - if key is non-str falsy, the key is omitted\n                - eg. &lt;option selected=\n    Returns:\n        str: html element with specific tag and attributes\n    \"\"\"\n    args_str = \" \" + \" \".join(args) if args else \"\"\n    kwarg_str = reduce(lambda cum, key: cum + attr2str(key, kwargs), kwargs, \"\")\n\n    # content-less `void` element with self closing tag\n    if content is None:\n        return f\"&lt;{tag}{kwarg_str}{args_str} /&gt;\"\n\n    inner = \"\".join(content) if isinstance(content, list) else content\n    return f\"&lt;{tag}{kwarg_str}{args_str}&gt;{inner}&lt;/{tag}&gt;\"\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#installation","title":"Installation","text":"<p><code>pip install kTemplate</code></p> <p>Pure python package, zero dependency.</p>"},{"location":"usage/#common-html-elements","title":"Common HTML Elements","text":"<ul> <li> <p>common elements(div, span, a, img ...etc) can be imported directly</p> <p>eg. <code>from kTemplate import div, span, a, img</code></p> </li> <li> <p>see list of common HTML elements here</p> </li> <li> <p>rare or custom element could be created by the <code>element</code> function</p> <p>eg. <code>element(tag='MyTag', content='foo', href='bar')</code></p> <p>\u2192 <code>&lt;MyTag href=\"bar\"&gt;foo&lt;/MyTag&gt;</code></p> </li> </ul>"},{"location":"usage/#custom-elements","title":"Custom Elements","text":"<p>We use <code>element</code> function to create custom HTML elements. Usage of the function arguments is illustrated below.</p>"},{"location":"usage/#tag","title":"tag","text":"<p>required: name of the custom tag.</p>"},{"location":"usage/#content","title":"content","text":"<ul> <li> <p><code>content=None</code> (default value) create void element such as: <code>br</code>, <code>hr</code>, <code>img</code>, <code>meta</code> ... etc</p> <p>eg. <code>br()</code> \u2192 <code>&lt;br /&gt;</code></p> </li> <li> <p>empty string <code>content=\"\"</code> creates element with end tag but no content.</p> <p>eg <code>script(content=\"\")</code> \u2192 <code>&lt;script&gt;&lt;/script&gt;</code></p> </li> <li> <p>since elements are just text, it can interpolate with other text</p> <p>eg. <code>content=f\"this {i('is')} good\"</code> \u2192  <code>this &lt;i&gt;is&lt;/i&gt; good</code></p> </li> <li> <p>use <code>list</code> to create multiple child elements</p> <p>eg. <code>div(content=[br(), hr()])</code> \u2192 <code>&lt;div&gt;&lt;br /&gt;&lt;hr /&gt;&lt;/div&gt;</code></p> </li> </ul>"},{"location":"usage/#args","title":"*args","text":"<p>variable non-keyword arguments will be converted to element attributes without values. eg. <code>defer</code>, <code>option</code></p> <p>It is useful when working with UnoCSS attributify mode, you can assign CSS utility classes directly as attributes. eg.</p> <pre><code>div(None, 'm-2', 'rounded', 'text-teal-400')\n</code></pre> <p>returns</p> <pre><code>&lt;div m-2 rounded text-teal-400 /&gt;\n</code></pre>"},{"location":"usage/#kwargs","title":"**kwargs","text":"<p>variable keyword arguments</p> <ul> <li>string, included empty string <code>\"\"</code> create string attributes</li> <li> <p>non-string truthy value create empty attribute</p> <p>eg. <code>option(\"foo\", selected=True)</code> -&gt; <code>&lt;option selected&gt;foo&lt;/option&gt;</code></p> </li> <li> <p>attribute is omitted for non-string falsy value(<code>None</code>, <code>False</code>, <code>[]</code>, <code>0</code> ...etc)</p> <p>eg. <code>option(\"bar\", selected=False)</code> -&gt; <code>&lt;option&gt;bar&lt;/option&gt;</code></p> </li> </ul>"},{"location":"usage/#example","title":"Example","text":"<p>The following example demonstrate the key features provided by kTemplate. See References for full documentation.</p> <pre><code>from kTemplate import (\n    DOCTYPE,  # special non-element\n    html,\n    div,\n    img,\n    body,\n    head,\n    title,\n    script,\n    select,\n    option,\n)\nfrom kTemplate import element  # for creating custom element\n\n\nhtml_str = DOCTYPE + html(\n    [\n        head(\n            # use list to enclose multiple siblings\n            [\n                title(\"testing html template\"),\n\n                # attr=True will convert to attribute w/o value, eg. defer\n                script(\n                    src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime/attributify.global.js\",\n                    defer=True\n                ),\n            ]\n        ),\n        body(\n            [\n                # content-less element without closing tag\n                img(src=\"http://placekitten.com/150/100\"),\n\n                # cls attribute will convert to `class`\n                div(\"pls select the direction:\", cls=\"text-xl\"),\n                select(\n                    # attr selected showup when selected=True, otherwise omitted\n                    [\n                      option(dir, selected=(dir == \"South\"))\n                      for dir in \"East South West North\".split()\n                    ]\n                    # underscore will convert to hyphen, eg. `data-type`\n                    data_type=\"direction\"  \n                ),\n\n                # create custom element\n                element(tag=\"MyElement\", props=\"some-props\")\n            ],\n            cls=\"font-sans\",\n        ),\n    ]\n)\n</code></pre> <p>Note that in order to workaround python naming constrains:</p> <ul> <li><code>class</code> attribute denoted by <code>cls</code></li> <li>underscore <code>_</code> will be converted to hyphen <code>-</code></li> </ul>"},{"location":"usage/#templates-and-components","title":"Templates and Components","text":"<p>You can create HTML templates and components with the same mechanism of creating elements.</p> <pre><code>from kTemplate import div, h2, hr, DOCTYPE, html, head, script, body\n\n\ndef template(slot: str) -&gt; str:\n    \"\"\"html template with slot\"\"\"\n    return DOCTYPE + html(\n        [\n            # UnoCSS\n            head(script(\"\", src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime\")),\n            body(slot),\n        ]\n    )\n\n\ndef component(name: str, age: int, slot1: str, slot2: str = \"\"):\n    \"\"\"component with props and slots\"\"\"\n    return div(\n        [\n            h2(f\"Hi {name} \ud83d\ude80\", cls=\"bg-orange-300 rounded\"),\n            div(f\"I am {age} ~\", cls=\"m-2 rounded text-teal-400\"),\n            slot1,\n            hr(),\n            slot2,\n        ]\n    )\n\n\nwith open(\"index.html\", \"w\") as f:\n    html = template(component(\"Kelvin\", 42, div(\"Good Day \ud83c\udf40\")))\n    f.write(html)\n</code></pre> <p>then the following HTML will be created(without indents and line breaks):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;\n      &lt;h2 class=\"bg-orange-300 rounded\"&gt;Hi Kelvin \ud83d\ude80&lt;/h2&gt;\n      &lt;div class=\"m-2 rounded text-teal-400\"&gt;I am 42 ~&lt;/div&gt;\n      &lt;div&gt;Good Day \ud83c\udf40&lt;/div&gt;\n      &lt;hr /&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"}]}