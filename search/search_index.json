{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kTemplate","text":"<p>a minimalist python html template</p> <p>\ud83d\udd17 source code</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p><code>pip install kTemplate</code></p>"},{"location":"#examples","title":"Examples","text":"<pre><code>from kTemplate import (\ndiv, img, # common html elements\nelement   # for creating custom element\n)\n# create common html element\n# `class` represents by `cls` due to python keyword\nhtml_str = div(img(src='url'), cls='bar')\n# &lt;div class=\"bar\"&gt;&lt;img src=\"url\"/&gt;&lt;/div&gt;\n# create custom element\nmy_element = element(tag=\"MyElement\", content=\"foo\" props=\"bar\")\n# &lt;MyElement props=\"ar\"&gt;foo&lt;/MyElement&gt;\n</code></pre> <p>Please refer to the docs for creating HTML templates and components</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Read the documentation for more about:</p> <ul> <li>usage details</li> <li>function references</li> <li>contributing</li> <li>testing</li> <li>changelog</li> </ul>"},{"location":"#motivation","title":"Motivation","text":"<p>When building web apps with python, no matter using Flask, FastAPI or Django, the go-to template is Jinja. This is a sensible choice when building web app. However it's a bit over-kill when creating simple website. Also, I am not a fan of Jinja's template syntax, eg. putting python loops in html with <code>{% ... %}</code> looks clumsy:</p> <pre><code>&lt;ul id=\"navigation\"&gt;\n{% for item in navigation %}\n    &lt;li&gt;&lt;a href=\"{{ item.href }}\"&gt;{{ item.caption }}&lt;/a&gt;&lt;/li&gt;\n{% endfor %}\n&lt;/ul&gt;\n</code></pre> <p>I prefer something like this instead:</p> <pre><code>ul(\nid = \"navigation\",\ncontent = [\nli(\na(item.caption, href=item.href)\n)\nfor item in navigation\n]  \n)\n</code></pre> <p>Its pure python, having full support of intellisense, type checking, and all language supports from the text editor. I feel much better DX with this approach.</p> <p>Separation of concern sounds good, but it comes with a cost: adding another concern \ud83e\udd2a... So separating HTML with python is not always a good choice, especially in simple projects.</p> <p>Mixing template logic within python eliminates the extra layer of complexity, which I think is a reasonable choice for small/medium size projects. There are libraries provide in-python html template, such as Dominate and fast-html.</p> <p>Dominate is a well designed lib and I'll certainly go for it for medium sized project. Their <code>with element_name</code> pattern is a brilliant use of python context manager, highly recommended \ud83d\udc4d. However, for simple project, I'm still looking for a simpler solution.</p> <p><code>fast-html</code> come close to what I want. It uses python <code>generator</code> as element output to speed up the template concatenation process. This is a efficient technical choice, and I think that's why the author name it \"fast\" html. But still, when dealing with simple or even single page demo sites, pure text elements is what I am looking for instead of generator. Performance hit is negligible in that case.</p> <p>That's why I create this text centric html template library, and share it on PyPi. I name it \"k\" template because... just after my initial \ud83d\ude1c. Hope u find it useful.</p>"},{"location":"#need-help","title":"Need Help?","text":"<p>Open a github issue or ping me on Twitter </p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#033-2023-02-19","title":"0.3.3 (2023-02-19)","text":""},{"location":"changelog/#new-features","title":"New Features","text":"<ul> <li>udpate element output type from Any to str</li> </ul>"},{"location":"changelog/#fixes","title":"Fixes","text":"<ul> <li>docs logo, coverage badge</li> <li>coverage specify pytest folders</li> </ul>"},{"location":"changelog/#docs","title":"Docs","text":"<ul> <li>update appearance</li> <li>update favicon and contribute</li> </ul>"},{"location":"changelog/#others","title":"Others","text":"<ul> <li>update changelog, version pump</li> </ul> <p>Full set of changes: <code>0.3.2...0.3.3</code></p>"},{"location":"changelog/#032-2023-02-03","title":"0.3.2 (2023-02-03)","text":""},{"location":"changelog/#docs_1","title":"Docs","text":"<ul> <li>update chanagelog</li> </ul>"},{"location":"changelog/#others_1","title":"Others","text":"<ul> <li>automate version pump, auto-changelog, pypi publish</li> <li>combine test and docs group into dev group</li> </ul> <p>Full set of changes: <code>0.3.1...0.3.2</code></p>"},{"location":"changelog/#031-2023-01-31","title":"0.3.1 (2023-01-31)","text":""},{"location":"changelog/#fixes_1","title":"Fixes","text":"<ul> <li>docstring of generated element functions</li> </ul>"},{"location":"changelog/#docs_2","title":"Docs","text":"<ul> <li>add template &amp; component usage</li> </ul>"},{"location":"changelog/#others_2","title":"Others","text":"<ul> <li>pump to v0.3.0</li> </ul> <p>Full set of changes: <code>0.3.0...0.3.1</code></p>"},{"location":"changelog/#030-2023-01-29","title":"0.3.0 (2023-01-29)","text":""},{"location":"changelog/#new-features_1","title":"New Features","text":"<ul> <li>support python 3.10</li> </ul>"},{"location":"changelog/#docs_3","title":"Docs","text":"<ul> <li>update changelog</li> </ul>"},{"location":"changelog/#others_3","title":"Others","text":"<ul> <li>pypi pump to v0.2.0</li> </ul> <p>Full set of changes: <code>0.2.0...0.3.0</code></p>"},{"location":"changelog/#020-2023-01-28","title":"0.2.0 (2023-01-28)","text":""},{"location":"changelog/#new-features_2","title":"New Features","text":"<ul> <li>add *args in element function for attribute w/o value</li> </ul>"},{"location":"changelog/#docs_4","title":"Docs","text":"<ul> <li>update readme and changelog</li> <li>add python and black badge</li> </ul> <p>Full set of changes: <code>0.1.1...0.2.0</code></p>"},{"location":"changelog/#011-2023-01-23","title":"0.1.1 (2023-01-23)","text":""},{"location":"changelog/#fixes_2","title":"Fixes","text":"<ul> <li>readme badges</li> </ul>"},{"location":"changelog/#docs_5","title":"Docs","text":"<ul> <li>set default theme to dark</li> </ul>"},{"location":"changelog/#others_4","title":"Others","text":"<ul> <li>publish to pypi 0.1.1</li> <li>rename gh action, add pull req trigger</li> <li>move coverage report + badge to inside docs</li> <li>add build status badge</li> <li>fine tune docs</li> <li>add coverage badge w/ report, add run-test script</li> </ul> <p>Full set of changes: <code>0.1.0...0.1.1</code></p>"},{"location":"changelog/#010-2023-01-16","title":"0.1.0 (2023-01-16)","text":""},{"location":"changelog/#fixes_3","title":"Fixes","text":"<ul> <li>mkdocs index page</li> <li>pytest args in github action</li> </ul>"},{"location":"changelog/#docs_6","title":"Docs","text":"<ul> <li>setup mkdocs</li> </ul>"},{"location":"changelog/#others_5","title":"Others","text":"<ul> <li>add mkdocs auto deploy</li> <li>update github action</li> <li>update docs and doctest</li> </ul>"},{"location":"contribute/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contribute/#environment-setup","title":"Environment setup","text":"<ul> <li>install poetry</li> <li>fork the repo to your github account</li> <li>clone the repo and change into the directory</li> <li>install the dependencies:</li> </ul> <pre><code>poetry install --with dev\n</code></pre> <p>Dev dependencies are installed in <code>.venv</code> folder.</p>"},{"location":"contribute/#development","title":"Development","text":"<ol> <li>start the environment with <code>poetry shell</code></li> <li>create a new branch: <code>git checkout -b branch-name</code></li> <li>edit the code and docs</li> <li>test your code with <code>pytest --doctest-modules path/to/your/files</code></li> </ol>"},{"location":"contribute/#code-formatting","title":"Code Formatting","text":"<ul> <li>run <code>black path/to/your/files</code> to auto-format the code</li> <li>or use <code>black</code> as the python auto formatter in your code editor</li> </ul>"},{"location":"contribute/#testing","title":"Testing","text":"<p>This package use both <code>doctest</code> in docstring and <code>pytest</code> to perform tests. Please test the code and fix any issue before making PR.</p>"},{"location":"contribute/#updating-docs","title":"Updating Docs","text":"<p>If you updated the docs:</p> <ul> <li>run <code>mkdocs serve</code></li> <li>visit http://localhost:8000 and check that everything looks good</li> </ul>"},{"location":"contribute/#ci-github-action","title":"CI - Github Action","text":"<p>If you are unsure about how to fix the error/warning from github action, just let the CI fail, we will help you during code review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022 Kelvin Ng</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/","title":"References","text":""},{"location":"reference/#kTemplate.main","title":"<code>kTemplate.main</code>","text":""},{"location":"reference/#kTemplate.main.attr2str","title":"<code>attr2str(key: str, attrs: dict) -&gt; str</code>","text":"<p>create attribute string of specific key in an html element</p> <p>Examples:</p> <p>Here shows the attribute string output from diff types of attribute dict value</p> <ul> <li>str -&gt; str</li> </ul> <pre><code>&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": \"y\"})\n' x=\"y\"'\n</code></pre> <ul> <li>empty str -&gt; empty str</li> </ul> <pre><code>&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": \"\"})\n' x=\"\"'\n</code></pre> <ul> <li>non str truthy -&gt; key itself</li> </ul> <pre><code>&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": True})\n' x'\n&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": 1})\n' x'\n</code></pre> <ul> <li>non str falsy -&gt; omit</li> </ul> <pre><code>&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": False})\n''\n&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": None})\n''\n&gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": 0})\n''\n</code></pre> <ul> <li>convert attr underscore to hyphen</li> </ul> <pre><code>&gt;&gt;&gt; attr2str(key=\"data_y\", attrs={\"data_y\": \"y\"})\n' data-y=\"y\"'\n</code></pre> <ul> <li>convert attr name cls to class</li> </ul> <pre><code>&gt;&gt;&gt; attr2str(key=\"cls\", attrs={\"cls\": \"y\"})\n' class=\"y\"'\n</code></pre> Note <p>to work around python naming restriction, the key <code>cls</code> will conver to <code>class</code>, and underscore <code>_</code> will convert to hyphen <code>-</code></p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>attribute key name</p> required <code>attrs</code> <code>dict</code> <p>attribute key-value pairs of an element</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>attribute portion of an element</p> Source code in <code>kTemplate/main.py</code> <pre><code>def attr2str(key: str, attrs: dict) -&gt; str:\n\"\"\"\n    create attribute string of specific key in an html element\n    Examples:\n        Here shows the attribute string output from diff types of attribute dict value\n        - str -&gt; str\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": \"y\"})\n        ' x=\"y\"'\n        - empty str -&gt; empty str\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": \"\"})\n        ' x=\"\"'\n        - non str truthy -&gt; key itself\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": True})\n        ' x'\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": 1})\n        ' x'\n        - non str falsy -&gt; omit\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": False})\n        ''\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": None})\n        ''\n        &gt;&gt;&gt; attr2str(key=\"x\", attrs={\"x\": 0})\n        ''\n        - convert attr underscore to hyphen\n        &gt;&gt;&gt; attr2str(key=\"data_y\", attrs={\"data_y\": \"y\"})\n        ' data-y=\"y\"'\n        - convert attr name cls to class\n        &gt;&gt;&gt; attr2str(key=\"cls\", attrs={\"cls\": \"y\"})\n        ' class=\"y\"'\n    Note:\n        to work around python naming restriction,\n        the key `cls` will conver to `class`,\n        and underscore `_` will convert to hyphen `-`\n    Args:\n        key (str): attribute key name\n        attrs (dict): attribute key-value pairs of an element\n    Returns:\n        str: attribute portion of an element\n    \"\"\"\nattr = \"class\" if key == \"cls\" else key.replace(\"_\", \"-\")\nval = attrs[key]\nif isinstance(val, str):\nreturn f' {attr}=\"{val}\"'\nreturn f\" {attr}\" if val else \"\"\n</code></pre>"},{"location":"reference/#kTemplate.main.create_elements","title":"<code>create_elements(tags: str) -&gt; list[Callable[..., str]]</code>","text":"<p>create tagged element functions</p> Notes <p>This is a higher order function that returns a list of functions</p> <p>Examples:</p> <ul> <li>single element</li> </ul> <pre><code>&gt;&gt;&gt; funcs = create_elements(\"div\")\n&gt;&gt;&gt; [f() for f in funcs]\n['&lt;div /&gt;']\n</code></pre> <ul> <li>multiple elements</li> </ul> <pre><code>&gt;&gt;&gt; funcs = create_elements(\"a, br\")\n&gt;&gt;&gt; [f() for f in funcs]\n['&lt;a /&gt;', '&lt;br /&gt;']\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>tags</code> <code>str</code> <p>names of functions to be created, comma separated eg. \"a, br, div, span\"</p> required <p>Returns:</p> Type Description <code>list[Callable[..., str]]</code> <p>list[TaggedElement]: list of tagged element functions eg. [a br div span]</p> Source code in <code>kTemplate/main.py</code> <pre><code>def create_elements(tags: str) -&gt; list[Callable[..., str]]:\n\"\"\"create tagged element functions\n    Notes:\n        This is a higher order function that returns a list of functions\n    Examples:\n        - single element\n        &gt;&gt;&gt; funcs = create_elements(\"div\")\n        &gt;&gt;&gt; [f() for f in funcs]\n        ['&lt;div /&gt;']\n        - multiple elements\n        &gt;&gt;&gt; funcs = create_elements(\"a, br\")\n        &gt;&gt;&gt; [f() for f in funcs]\n        ['&lt;a /&gt;', '&lt;br /&gt;']\n    Args:\n        tags (str): names of functions to be created, comma separated\n            eg. \"a, br, div, span\"\n    Returns:\n        list[TaggedElement]: list of tagged element functions\n            eg. [a br div span]\n    \"\"\"\nop = []\nfor tag in tags.split(\",\"):\nfunc = partial(element, tag.strip())\nfunc.__doc__ = f\"\"\"`{tag}` element function\nArgs:\n    content (str | list[str], optional): Defaults to None.\n        text or list of other elements, `None` returns element w/o closing tag\n    args (list[str], optional): names of value-less attributes\n        - eg. `defer`, `selected`\n        - it is also useful for UnoCSS attributify mode\n    kwagrs (dict): key-value pairs of html attributes\n        - if val is str, assign `key=\"val\"`\n        - if key is non-string truthy, assign value-less attribute, eg.\n            - selected=True -&gt; selected\n            - defer=1 -&gt; defer\n        - if key is non-str falsy, the key is omitted\n            - eg. &lt;option selected=\nReturns:\n    str: `{tag}` element string with attributes\n\"\"\"\nop.append(func)\nreturn op\n</code></pre>"},{"location":"reference/#kTemplate.main.element","title":"<code>element(tag: str, content: str | list[str] = None, *args, **kwargs) -&gt; str</code>","text":"<p>return html element with specific tag and attributes</p> <p>Examples:</p> <ul> <li>void element, content=None (default)</li> </ul> <pre><code>&gt;&gt;&gt; element(tag=\"br\")\n'&lt;br /&gt;'\n</code></pre> <ul> <li>void element w/ attr</li> </ul> <pre><code>&gt;&gt;&gt; element(tag=\"img\", src=\"http://img.url\")\n'&lt;img src=\"http://img.url\" /&gt;'\n</code></pre> <ul> <li>empty string content -&gt; element with end tag but no content</li> </ul> <pre><code>&gt;&gt;&gt; element(tag=\"script\", content=\"\", src=\"url\")\n'&lt;script src=\"url\"&gt;&lt;/script&gt;'\n</code></pre> <ul> <li>non-string truthy attrubite -&gt; return attribute key itself</li> </ul> <pre><code>&gt;&gt;&gt; element(tag=\"option\", content=\"a\", selected=True)\n'&lt;option selected&gt;a&lt;/option&gt;'\n</code></pre> <ul> <li>non-string falsy attrubite -&gt; attribute omitted</li> </ul> <pre><code>&gt;&gt;&gt; element(tag=\"option\", content=\"a\", selected=False)\n'&lt;option&gt;a&lt;/option&gt;'\n</code></pre> <ul> <li>var positional args -&gt; return attribute key itself</li> </ul> <pre><code>&gt;&gt;&gt; element('option', 'foo', 'selected', value='foo')\n'&lt;option value=\"foo\" selected&gt;foo&lt;/option&gt;'\n</code></pre> <ul> <li>var positional args, useful in UnoCSS attributify mode</li> </ul> <pre><code>&gt;&gt;&gt; element('div', None, 'm-2', 'rounded', 'text-teal-400')\n'&lt;div m-2 rounded text-teal-400 /&gt;'\n</code></pre> <ul> <li>var positional args + keyword args</li> </ul> <pre><code>&gt;&gt;&gt; element('a', 'foo', 'm-2', 'rounded', 'text-teal-400', href='bar')\n'&lt;a href=\"bar\" m-2 rounded text-teal-400&gt;foo&lt;/a&gt;'\n</code></pre> <ul> <li>element tree</li> </ul> <pre><code>&gt;&gt;&gt; element(tag=\"div\", content=element(\"div\", \"x\"))\n'&lt;div&gt;&lt;div&gt;x&lt;/div&gt;&lt;/div&gt;'\n</code></pre> <ul> <li>mix text w/ element</li> </ul> <pre><code>&gt;&gt;&gt; element(tag=\"div\", content=f'x{element(\"i\", \"y\")}')\n'&lt;div&gt;x&lt;i&gt;y&lt;/i&gt;&lt;/div&gt;'\n</code></pre> <ul> <li>content w/ list of elements -&gt; elements in list are siblings</li> </ul> <pre><code>&gt;&gt;&gt; element(\n...     tag=\"div\",\n...     content=[element(\"br\"), element(\"a\", content=\"a link\", href=\"url\")]\n... )\n'&lt;div&gt;&lt;br /&gt;&lt;a href=\"url\"&gt;a link&lt;/a&gt;&lt;/div&gt;'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>element tag name</p> required <code>content</code> <code>str | list[str]</code> <p>Defaults to None. text or list of other elements, <code>None</code> returns element w/o closing tag</p> <code>None</code> <code>args</code> <code>list[str]</code> <p>names of value-less attributes - eg. <code>defer</code>, <code>selected</code> - it is also useful for UnoCSS attributify mode</p> <code>()</code> <code>kwagrs</code> <code>dict</code> <p>key-value pairs of html attributes - if val is str, assign <code>key=\"val\"</code> - if key is non-string truthy, assign value-less attribute, eg.     - selected=True -&gt; selected     - defer=1 -&gt; defer - if key is non-str falsy, the key is omitted     - eg. &lt;option selected=</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>html element with specific tag and attributes</p> Source code in <code>kTemplate/main.py</code> <pre><code>def element(tag: str, content: str | list[str] = None, *args, **kwargs) -&gt; str:\n\"\"\"return html element with specific tag and attributes\n    Examples:\n        - void element, content=None (default)\n        &gt;&gt;&gt; element(tag=\"br\")\n        '&lt;br /&gt;'\n        - void element w/ attr\n        &gt;&gt;&gt; element(tag=\"img\", src=\"http://img.url\")\n        '&lt;img src=\"http://img.url\" /&gt;'\n        - empty string content -&gt; element with end tag but no content\n        &gt;&gt;&gt; element(tag=\"script\", content=\"\", src=\"url\")\n        '&lt;script src=\"url\"&gt;&lt;/script&gt;'\n        - non-string truthy attrubite -&gt; return attribute key itself\n        &gt;&gt;&gt; element(tag=\"option\", content=\"a\", selected=True)\n        '&lt;option selected&gt;a&lt;/option&gt;'\n        - non-string falsy attrubite -&gt; attribute omitted\n        &gt;&gt;&gt; element(tag=\"option\", content=\"a\", selected=False)\n        '&lt;option&gt;a&lt;/option&gt;'\n        - var positional args -&gt; return attribute key itself\n        &gt;&gt;&gt; element('option', 'foo', 'selected', value='foo')\n        '&lt;option value=\"foo\" selected&gt;foo&lt;/option&gt;'\n        - var positional args, useful in UnoCSS attributify mode\n        &gt;&gt;&gt; element('div', None, 'm-2', 'rounded', 'text-teal-400')\n        '&lt;div m-2 rounded text-teal-400 /&gt;'\n        - var positional args + keyword args\n        &gt;&gt;&gt; element('a', 'foo', 'm-2', 'rounded', 'text-teal-400', href='bar')\n        '&lt;a href=\"bar\" m-2 rounded text-teal-400&gt;foo&lt;/a&gt;'\n        - element tree\n        &gt;&gt;&gt; element(tag=\"div\", content=element(\"div\", \"x\"))\n        '&lt;div&gt;&lt;div&gt;x&lt;/div&gt;&lt;/div&gt;'\n        - mix text w/ element\n        &gt;&gt;&gt; element(tag=\"div\", content=f'x{element(\"i\", \"y\")}')\n        '&lt;div&gt;x&lt;i&gt;y&lt;/i&gt;&lt;/div&gt;'\n        - content w/ list of elements -&gt; elements in list are siblings\n        &gt;&gt;&gt; element(\n        ...     tag=\"div\",\n        ...     content=[element(\"br\"), element(\"a\", content=\"a link\", href=\"url\")]\n        ... )\n        '&lt;div&gt;&lt;br /&gt;&lt;a href=\"url\"&gt;a link&lt;/a&gt;&lt;/div&gt;'\n    Args:\n        tag (str): element tag name\n        content (str | list[str], optional): Defaults to None.\n            text or list of other elements, `None` returns element w/o closing tag\n        args (list[str], optional): names of value-less attributes\n            - eg. `defer`, `selected`\n            - it is also useful for UnoCSS attributify mode\n        kwagrs (dict): key-value pairs of html attributes\n            - if val is str, assign `key=\"val\"`\n            - if key is non-string truthy, assign value-less attribute, eg.\n                - selected=True -&gt; selected\n                - defer=1 -&gt; defer\n            - if key is non-str falsy, the key is omitted\n                - eg. &lt;option selected=\n    Returns:\n        str: html element with specific tag and attributes\n    \"\"\"\nargs_str = \" \" + \" \".join(args) if args else \"\"\nkwarg_str = reduce(lambda cum, key: cum + attr2str(key, kwargs), kwargs, \"\")\n# content-less `void` element with self closing tag\nif content is None:\nreturn f\"&lt;{tag}{kwarg_str}{args_str} /&gt;\"\ninner = \"\".join(content) if isinstance(content, list) else content\nreturn f\"&lt;{tag}{kwarg_str}{args_str}&gt;{inner}&lt;/{tag}&gt;\"\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#installation","title":"Installation","text":"<p><code>pip install kTemplate</code></p> <p>Pure python package, zero dependency.</p>"},{"location":"usage/#common-html-elements","title":"Common HTML Elements","text":"<ul> <li> <p>common elements(div, span, a, img ...etc) can be imported directly</p> <p>eg. <code>from kTemplate import div, span, a, img</code></p> </li> <li> <p>see list of common HTML elements here</p> </li> <li> <p>rare or custom element could be created by the <code>element</code> function</p> <p>eg. <code>element(tag='MyTag', content='foo', href='bar')</code></p> <p>\u2192 <code>&lt;MyTag href=\"bar\"&gt;foo&lt;/MyTag&gt;</code></p> </li> </ul>"},{"location":"usage/#custom-elements","title":"Custom Elements","text":"<p>We use <code>element</code> function to create custom HTML elements. Usage of the function arguments is illustrated below.</p>"},{"location":"usage/#tag","title":"tag","text":"<p>required: name of the custom tag.</p>"},{"location":"usage/#content","title":"content","text":"<ul> <li> <p><code>content=None</code> (default value) create void element such as: <code>br</code>, <code>hr</code>, <code>img</code>, <code>meta</code> ... etc</p> <p>eg. <code>br()</code> \u2192 <code>&lt;br /&gt;</code></p> </li> <li> <p>empty string <code>content=\"\"</code> creates element with end tag but no content.</p> <p>eg <code>script(content=\"\")</code> \u2192 <code>&lt;script&gt;&lt;/script&gt;</code></p> </li> <li> <p>since elements are just text, it can interpolate with other text</p> <p>eg. <code>content=f\"this {i('is')} good\"</code> \u2192  <code>this &lt;i&gt;is&lt;/i&gt; good</code></p> </li> <li> <p>use <code>list</code> to create multiple child elements</p> <p>eg. <code>div(content=[br(), hr()])</code> \u2192 <code>&lt;div&gt;&lt;br /&gt;&lt;hr /&gt;&lt;/div&gt;</code></p> </li> </ul>"},{"location":"usage/#args","title":"*args","text":"<p>variable non-keyword arguments will be converted to element attributes without values. eg. <code>defer</code>, <code>option</code></p> <p>It is useful when working with UnoCSS attributify mode, you can assign CSS utility classes directly as attributes. eg.</p> <pre><code>div(None, 'm-2', 'rounded', 'text-teal-400')\n</code></pre> <p>returns</p> <pre><code>&lt;div m-2 rounded text-teal-400 /&gt;\n</code></pre>"},{"location":"usage/#kwargs","title":"**kwargs","text":"<p>variable keyword arguments</p> <ul> <li>string, included empty string <code>\"\"</code> create string attributes</li> <li> <p>non-string truthy value create empty attribute</p> <p>eg. <code>option(\"foo\", selected=True)</code> -&gt; <code>&lt;option selected&gt;foo&lt;/option&gt;</code></p> </li> <li> <p>attribute is omitted for non-string falsy value(<code>None</code>, <code>False</code>, <code>[]</code>, <code>0</code> ...etc)</p> <p>eg. <code>option(\"bar\", selected=False)</code> -&gt; <code>&lt;option&gt;bar&lt;/option&gt;</code></p> </li> </ul>"},{"location":"usage/#example","title":"Example","text":"<p>The following example demonstrate the key features provided by kTemplate. See References for full documentation.</p> <pre><code>from kTemplate import (\nDOCTYPE,  # special non-element\nhtml,\ndiv,\nimg,\nbody,\nhead,\ntitle,\nscript,\nselect,\noption,\n)\nfrom kTemplate import element  # for creating custom element\nhtml_str = DOCTYPE + html(\n[\nhead(\n# use list to enclose multiple siblings\n[\ntitle(\"testing html template\"),\n# attr=True will convert to attribute w/o value, eg. defer\nscript(\nsrc=\"https://cdn.jsdelivr.net/npm/@unocss/runtime/attributify.global.js\",\ndefer=True\n),\n]\n),\nbody(\n[\n# content-less element without closing tag\nimg(src=\"http://placekitten.com/150/100\"),\n# cls attribute will convert to `class`\ndiv(\"pls select the direction:\", cls=\"text-xl\"),\nselect(\n# attr selected showup when selected=True, otherwise omitted\n[\noption(dir, selected=(dir == \"South\"))\nfor dir in \"East South West North\".split()\n]\n# underscore will convert to hyphen, eg. `data-type`\ndata_type=\"direction\"  \n),\n# create custom element\nelement(tag=\"MyElement\", props=\"some-props\")\n],\ncls=\"font-sans\",\n),\n]\n)\n</code></pre> <p>Note that in order to workaround python naming constrains:</p> <ul> <li><code>class</code> attribute denoted by <code>cls</code></li> <li>underscore <code>_</code> will be converted to hyphen <code>-</code></li> </ul>"},{"location":"usage/#templates-and-components","title":"Templates and Components","text":"<p>You can create HTML templates and components with the same mechanism of creating elements.</p> <pre><code>from kTemplate import div, h2, hr, DOCTYPE, html, head, script, body\ndef template(slot: str) -&gt; str:\n\"\"\"html template with slot\"\"\"\nreturn DOCTYPE + html(\n[\n# UnoCSS\nhead(script(\"\", src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime\")),\nbody(slot),\n]\n)\ndef component(name: str, age: int, slot1: str, slot2: str = \"\"):\n\"\"\"component with props and slots\"\"\"\nreturn div(\n[\nh2(f\"Hi {name} \ud83d\ude80\", cls=\"bg-orange-300 rounded\"),\ndiv(f\"I am {age} ~\", cls=\"m-2 rounded text-teal-400\"),\nslot1,\nhr(),\nslot2,\n]\n)\nwith open(\"index.html\", \"w\") as f:\nhtml = template(component(\"Kelvin\", 42, div(\"Good Day \ud83c\udf40\")))\nf.write(html)\n</code></pre> <p>then the following HTML will be created(without indents and line breaks):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div&gt;\n&lt;h2 class=\"bg-orange-300 rounded\"&gt;Hi Kelvin \ud83d\ude80&lt;/h2&gt;\n&lt;div class=\"m-2 rounded text-teal-400\"&gt;I am 42 ~&lt;/div&gt;\n&lt;div&gt;Good Day \ud83c\udf40&lt;/div&gt;\n&lt;hr /&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"}]}